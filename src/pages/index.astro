---
import Layout from "../layouts/Layout.astro";
---

<Layout title="CI/CD">
  <main class="flex flex-col items-center">
    <article class="prose lg:prose-xl">
      <h1 class="text-4xl font-bold text-center">Messi gano la 8va</h1>
      <p>
        CI/CD es una metodología que facilita a los programadores la
        automatización de procesos, desde la integración de sus actualizaciones
        en un repositorio común hasta la implementación de estas actualizaciones
        en el ambiente principal.
      </p>
      <p>
        Aunque a menudo se mencionan juntos, CI y CD tienen roles distintos
        dentro de la metodología. CI, o Integración Continua, se refiere al
        proceso de integrar automáticamente el código nuevo o modificado en un
        repositorio centralizado, seguido de pruebas automáticas para detectar y
        solucionar fallos rápidamente. Por otro lado, CD puede referirse tanto a
        Entrega Continua como a Despliegue Continuo. En el contexto de Entrega
        Continua, se trata de tener actualizaciones de software listas para ser
        desplegadas en producción, pero la decisión de desplegarlas es manual.
        En el caso de Despliegue Continuo, la implementación de las
        actualizaciones en producción es automática, eliminando la intervención
        manual en el proceso de despliegue.
      </p>
      <p>
        Adoptando CI/CD, los equipos pueden publicar sus actualizaciones con
        mayor regularidad y confiabilidad. La automatización de la construcción
        del código, su validación y su implementación no solo simplifica la
        tarea de los programadores al integrar sus modificaciones, sino que
        también permite que las actualizaciones estén disponibles para los
        usuarios de manera más ágil y constante.
      </p>
      <p>
        Aunque CI/CD es un término ampliamente asociado con DevOps, no es
        exclusivo de esta filosofía. En realidad, CI/CD es una técnica
        recurrente en el mundo de la programación, esencial para agilizar y
        garantizar la calidad de las actualizaciones en el software.
      </p>
      <p>
        Los pipelines, por su parte, son conjuntos automatizados de procesos
        diseñados para guiar el código desde el repositorio hasta la producción.
        Imagina un pipeline como una línea de ensamblaje para el código: en cada
        etapa del pipeline, el código es compilado, probado y, si pasa las
        pruebas, avanza a la siguiente etapa. Este flujo estructurado garantiza
        que solo el código validado y de calidad llegue al ambiente de
        producción, minimizando los riesgos y agilizando las entregas.
      </p>
    </article>
  </main>
</Layout>
